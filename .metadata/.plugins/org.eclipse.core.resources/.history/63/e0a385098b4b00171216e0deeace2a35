package GameObjects;

import Helper.Assetloader;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.utils.Array;

public class Inventory {

	private Array<Slot> slots;
	
	public Inventory() {
        slots = new Array<Slot>(25);
        for (int i = 0; i < 25; i++) {
            slots.add(new Slot(null, 0));
        }

        // create some random items
        for (Slot slot : slots) {
            slot.add(new Item(1, "item"), 10000);
        }

        // create a few random empty slots
        for (int i = 0; i < 8; i++) {
            Slot randomSlot = slots.get(MathUtils.random(0, slots.size - 1));
            randomSlot.take(randomSlot.getAmount());
        }
    }
	
	public int checkInventory(Item item) {
        int amount = 0;

        for (Slot slot : slots) {
            if (slot.getItem() == item) {
                amount += slot.getAmount();
            }
        }

        return amount;
    }
	public boolean store(Item item, int amount) {
        // first check for a slot with the same item type
        Slot itemSlot = firstSlotWithItem(item);
        if (itemSlot != null) {
            itemSlot.add(item, amount);
            return true;
        } else {
            // now check for an available empty slot
            Slot emptySlot = firstSlotWithItem(null);
            if (emptySlot != null) {
                emptySlot.add(item, amount);
                return true;
            }
        }

        // no slot to add
        return false;
    }
	
	public Array<Slot> getSlots() {
        return slots;
    }

    private Slot firstSlotWithItem(Item item) {
        for (Slot slot : slots) {
            if (slot.getItem() == item) {
                return slot;
            }
        }

        return null;
    }
	
    public void render(SpriteBatch batcher,int gameWidth,int GameHeight){
    	
    	batcher.draw(Assetloader.ui[11],gameWidth * 0.1f,GameHeight * 0.15f,gameWidth * 0.8f,GameHeight * 0.8f);
    	

        for (int i=0;i<3;i++) {
        	for(int j=0;j<6;j++){
        	//batcher.setColor(Color.GREEN);
        	batcher.draw(Assetloader.ui[10],gameWidth * 0.15f + 90 * j,GameHeight * 0.3f + 80 * i,80,70);
        	
        	slots.get(i*6+j).render(batcher, gameWidth * 0.15f + 90 * j, GameHeight * 0.3f + 80 * i);
        	}
        }

    	batcher.setColor(Color.WHITE);
    }
	
}
